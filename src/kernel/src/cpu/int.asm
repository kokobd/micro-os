BITS 32

extern cpu_intHandler
global cpu_intHandlerPrim
global cpu_intHandlerPrimEntrySize

[SECTION .text]

cpu_intHandlerPrim:
    .entry0:
    mov dword [interruptNumber], 0x00
    jmp near .end
    .entry1:
    mov dword [interruptNumber], 0x01
    jmp near .end
    mov dword [interruptNumber], 0x02
    jmp near .end
    mov dword [interruptNumber], 0x03
    jmp near .end
    mov dword [interruptNumber], 0x04
    jmp near .end
    mov dword [interruptNumber], 0x05
    jmp near .end
    mov dword [interruptNumber], 0x06
    jmp near .end
    mov dword [interruptNumber], 0x07
    jmp near .end
    mov dword [interruptNumber], 0x08
    jmp near .end
    mov dword [interruptNumber], 0x09
    jmp near .end
    mov dword [interruptNumber], 0x0A
    jmp near .end
    mov dword [interruptNumber], 0x0B
    jmp near .end
    mov dword [interruptNumber], 0x0C
    jmp near .end
    mov dword [interruptNumber], 0x0D
    jmp near .end
    mov dword [interruptNumber], 0x0E
    jmp near .end
    mov dword [interruptNumber], 0x0F
    jmp near .end
    mov dword [interruptNumber], 0x10
    jmp near .end
    mov dword [interruptNumber], 0x11
    jmp near .end
    mov dword [interruptNumber], 0x12
    jmp near .end
    mov dword [interruptNumber], 0x13
    jmp near .end
    mov dword [interruptNumber], 0x14
    jmp near .end
    mov dword [interruptNumber], 0x15
    jmp near .end
    mov dword [interruptNumber], 0x16
    jmp near .end
    mov dword [interruptNumber], 0x17
    jmp near .end
    mov dword [interruptNumber], 0x18
    jmp near .end
    mov dword [interruptNumber], 0x19
    jmp near .end
    mov dword [interruptNumber], 0x1A
    jmp near .end
    mov dword [interruptNumber], 0x1B
    jmp near .end
    mov dword [interruptNumber], 0x1C
    jmp near .end
    mov dword [interruptNumber], 0x1D
    jmp near .end
    mov dword [interruptNumber], 0x1E
    jmp near .end
    mov dword [interruptNumber], 0x1F
    jmp near .end
    mov dword [interruptNumber], 0x20
    jmp near .end
    mov dword [interruptNumber], 0x21
    jmp near .end
    mov dword [interruptNumber], 0x22
    jmp near .end
    mov dword [interruptNumber], 0x23
    jmp near .end
    mov dword [interruptNumber], 0x24
    jmp near .end
    mov dword [interruptNumber], 0x25
    jmp near .end
    mov dword [interruptNumber], 0x26
    jmp near .end
    mov dword [interruptNumber], 0x27
    jmp near .end
    mov dword [interruptNumber], 0x28
    jmp near .end
    mov dword [interruptNumber], 0x29
    jmp near .end
    mov dword [interruptNumber], 0x2A
    jmp near .end
    mov dword [interruptNumber], 0x2B
    jmp near .end
    mov dword [interruptNumber], 0x2C
    jmp near .end
    mov dword [interruptNumber], 0x2D
    jmp near .end
    mov dword [interruptNumber], 0x2E
    jmp near .end
    mov dword [interruptNumber], 0x2F
    jmp near .end
    mov dword [interruptNumber], 0x30
    jmp near .end

    .end:
    cmp dword [interruptNumber], 8
    je .then0
    cmp dword [interruptNumber], 17
    je .then0
    cmp dword [interruptNumber], 14
    jle .then1
    push dword 0
    jmp .then0
    .then1:
    cmp dword [interruptNumber], 10
    jge .then0
    push dword 0
    .then0:
    ; now, there will be an error code on the stack, even
    ; if there were none generated by the interrupt

    push gs
    push fs
    push es
    push ds
    push ebp
    push edi
    push esi
    push edx
    push ecx
    push ebx
    push eax

    push esp
    push dword [interruptNumber]
    call cpu_intHandler
    add esp, 4 ; pop [interruptNumber]
    pop esp

    pop eax
    pop ebx
    pop ecx
    pop edx
    pop esi
    pop edi
    pop ebp
    pop ds
    pop es
    pop fs
    pop gs
    add esp, 4 ; pop the error code

    ; send EOI
    push eax
    mov al, 0x20
    out 0x20, al
    pop eax
    sti ; Re-enable interrupts
    iret

[SECTION .data]
cpu_intHandlerPrimEntrySize DD (cpu_intHandlerPrim.entry1 - cpu_intHandlerPrim.entry0)
interruptNumber DD 0
